@subheader """
#include <parsegen/rule.hpp>
    
#ifndef METAPARSER_CANDIDATE
#include <parsegen/metaparser.hpp>
#else
#include <parsegen/metaparser_candidate.hpp>
#endif
"""

start[Grammar] <- metas rules ENDOFFILE { Grammar(rules, metas) }
    / rules ENDOFFILE { Grammar(rules) }
metas[Strings] <- metas meta { append_vector(metas, meta) }
    / meta { create_vector(meta) }
meta[String] <- "@" NAME ws STRING NEWLINE { string.value }

rules[Rules] <- rule rules { prepend_vector(rules, rule) }
    / rule { create_vector(rule) }
rule[Rule] <- NAME LBRACK type RBRACK ws "<-" ws alts NEWLINE INDENT more_alts UNINDENT { Rule(name.value, concat(alts, more_alts), type) }
    / NAME LBRACK type RBRACK ws "<-" ws alts NEWLINE { Rule(name.value, alts, type) }
    / NAME LBRACK type RBRACK ws "<-" ws NEWLINE INDENT more_alts UNINDENT { Rule(name.value, more_alts, type) }

more_alts[Alts] <- "/" ws alts NEWLINE more_alts { concat(alts, more_alts) }
    / "/" ws alts NEWLINE { alts }

alts[Alts] <- alts ws "/" ws alt { append_vector(alts, alt) }
    / alt { create_vector(alt) }
alt[Alt] <- named_items ws LCURL type RCURL { Alt(named_items, type) }

named_items[NamedItems] <- named_items ws named_item { append_vector(named_items, named_item) }
    / named_item { create_vector(named_item) }
named_item[NamedItem] <- NAME "=" item { NamedItem(item, name.value) }
    / item { NamedItem(item) }
item[Item] <- atom { Item(atom) }
atom[Plain] <- NAME { name.value }
    / STRING { string.value }
    / "(" alts ")" { Group(alts) }

type[String] <- parts { parts }
parts[String] <- parts part { parts.append(part) }
    / part { part }
part[String] <- NAME { name.value }
    / SEMICOLON { semicolon.value }
    / "<" { token.value }
    / ">" { token.value }
    / LPAREN { lparen.value }
    / RPAREN { rparen.value }
    / ws { ws }
    / COMMA { comma.value }
    / DOT { dot.value }

ws[String] <- WHITESPACE { whitespace.value }
